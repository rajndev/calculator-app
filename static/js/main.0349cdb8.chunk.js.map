{"version":3,"sources":["components/display/Display.js","components/keypad/Keypad.js","components/calculator/Calculator.js","reportWebVitals.js","index.js"],"names":["Display","props","textareaRef","React","createRef","this","getRef","$","on","e","key","preventDefault","current","focus","className","type","id","value","ref","onChange","onSelect","Component","Keypad","name","onClick","onClearKeyClick","target","onKeyClick","onBackKeyClick","onEqualsKeyClick","Calculator","handleKeyClick","runningValueIsEmpty","state","runningValue","length","selectedStateIsFalse","selected","selectedText","substring","selectionStart","selectionEnd","insertTextIntoDisplay","setState","prevState","concat","scrollTop","scrollHeight","handleInputChange","handleSelect","event","cursorPos","start","end","setSelectionRange","blur","handleEqualsClick","result","running","includes","alert","math","toString","newCursorPos","handleClearClick","handleBackClick","deleteTextFromDisplay","sliced","slice","getTextareaRef","cursorStartPos","cursorEndPos","updatedText","textBeforeCursorStart","textAfterCursorEnd","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAwCeA,E,kDAnCX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACFC,YAAcC,IAAMC,UAAU,MAFpB,E,qDAKlB,WACIC,KAAKJ,MAAMK,OAAOD,KAAKH,aACvBK,IAAE,gBAAgBC,GAAI,YAAY,SAASC,GACvC,GAAa,cAAVA,EAAEC,IAGD,OADAD,EAAEE,kBACK,KAGfN,KAAKH,YAAYU,QAAQC,U,oBAG7B,WACI,OACI,qBAAKC,UAAU,UAAf,SACI,8BACI,0BACAC,KAAK,OACLC,GAAG,cACHF,UAAU,cACVG,MAAOZ,KAAKJ,MAAMgB,MAClBC,IAAKb,KAAKH,YACViB,SAAUd,KAAKJ,MAAMkB,SACrBC,SAAUf,KAAKJ,MAAMmB,mB,GA7BnBC,aCkCPC,G,kKAlCX,SAAOb,GAAI,IAAD,OACN,OACI,qBAAKK,UAAU,OAAf,SACI,sBAAKA,UAAU,MAAf,UACI,wBAAQS,KAAK,IAAIT,UAAU,SAASU,QAAS,SAACf,GAAD,OAAO,EAAKR,MAAMwB,gBAAgBhB,EAAEiB,OAAOH,OAAxF,eACA,wBAAQA,KAAK,IAAIT,UAAU,SAASU,QAAS,SAACf,GAAD,OAAO,EAAKR,MAAM0B,WAAWlB,EAAEiB,OAAOH,OAAnF,eACA,wBAAQA,KAAK,IAAIT,UAAU,SAASU,QAAS,SAACf,GAAD,OAAO,EAAKR,MAAM0B,WAAWlB,EAAEiB,OAAOH,OAAnF,eACA,wBAAQA,KAAK,IAAIT,UAAU,WAAWU,QAAS,SAACf,GAAD,OAAO,EAAKR,MAAM0B,WAAWlB,EAAEiB,OAAOH,OAArF,eAEA,wBAAQA,KAAK,IAAKC,QAAS,SAACf,GAAD,OAAO,EAAKR,MAAM0B,WAAWlB,EAAEiB,OAAOH,OAAjE,eACA,wBAAQA,KAAK,IAAKC,QAAS,SAACf,GAAD,OAAO,EAAKR,MAAM0B,WAAWlB,EAAEiB,OAAOH,OAAjE,eACA,wBAAQA,KAAK,IAAKC,QAAS,SAACf,GAAD,OAAO,EAAKR,MAAM0B,WAAWlB,EAAEiB,OAAOH,OAAjE,eACA,wBAAQA,KAAK,IAAIT,UAAU,WAAWU,QAAS,SAACf,GAAD,OAAO,EAAKR,MAAM0B,WAAWlB,EAAEiB,OAAOH,OAArF,eAEA,wBAAQA,KAAK,IAAKC,QAAS,SAACf,GAAD,OAAO,EAAKR,MAAM0B,WAAWlB,EAAEiB,OAAOH,OAAjE,eACA,wBAAQA,KAAK,IAAKC,QAAS,SAACf,GAAD,OAAO,EAAKR,MAAM0B,WAAWlB,EAAEiB,OAAOH,OAAjE,eACA,wBAAQA,KAAK,IAAKC,QAAS,SAACf,GAAD,OAAO,EAAKR,MAAM0B,WAAWlB,EAAEiB,OAAOH,OAAjE,eACA,wBAAQA,KAAK,IAAIT,UAAU,WAAWU,QAAS,SAACf,GAAD,OAAO,EAAKR,MAAM0B,WAAWlB,EAAEiB,OAAOH,OAArF,eAEA,wBAAQA,KAAK,IAAKC,QAAS,SAACf,GAAD,OAAO,EAAKR,MAAM0B,WAAWlB,EAAEiB,OAAOH,OAAjE,eACA,wBAAQA,KAAK,IAAKC,QAAS,SAACf,GAAD,OAAO,EAAKR,MAAM0B,WAAWlB,EAAEiB,OAAOH,OAAjE,eACA,wBAAQA,KAAK,IAAKC,QAAS,SAACf,GAAD,OAAO,EAAKR,MAAM0B,WAAWlB,EAAEiB,OAAOH,OAAjE,eACA,wBAAQA,KAAK,IAAIT,UAAU,WAAWU,QAAS,SAACf,GAAD,OAAO,EAAKR,MAAM0B,WAAWlB,EAAEiB,OAAOH,OAArF,kBAEA,wBAAQA,KAAK,IAAKC,QAAS,SAACf,GAAD,OAAO,EAAKR,MAAM0B,WAAWlB,EAAEiB,OAAOH,OAAjE,eACA,wBAAQA,KAAK,IAAKC,QAAS,SAACf,GAAD,OAAO,EAAKR,MAAM0B,WAAWlB,EAAEiB,OAAOH,OAAjE,eACA,wBAAQA,KAAK,SAAKC,QAAS,SAACf,GAAD,OAAO,EAAKR,MAAM2B,eAAenB,EAAEiB,OAAOH,OAArE,oBACA,wBAAQA,KAAK,IAAIT,UAAU,aAAaU,QAAS,SAACf,GAAD,OAAO,EAAKR,MAAM4B,iBAAiBpB,IAApF,wB,GA5BCY,c,QCgPNS,G,wDA7OX,WAAY7B,GAAQ,IAAD,8BACf,cAAMA,IASV8B,eAAiB,SAACrB,GACd,IAAIsB,EAAyD,IAAnC,EAAKC,MAAMC,aAAaC,OAC9CC,GAA+C,IAAxB,EAAKH,MAAMI,SAClCC,EAAe,EAAKL,MAAMC,aAAaK,UAAU,EAAKrC,YAAYU,QAAQ4B,eAAgB,EAAKtC,YAAYU,QAAQ6B,cAEnG,KAAjBH,GAAuB,EAAKL,MAAMI,UAA6B,KAAjBC,EAC7C,EAAKI,sBAAsBhC,IAIxBsB,IAAwBA,GAAuBI,KAE9C,EAAKO,UAAS,SAAAC,GAAS,MAAK,CACxBV,aAAcU,EAAUV,aAAaW,OAAOnC,OAIzB,MAApB,EAAKR,cACJ,EAAKA,YAAYU,QAAQkC,UAAY,EAAK5C,YAAYU,QAAQmC,gBA5B3D,EAmCnBC,kBAAoB,WAChB,EAAKL,SAAS,CAACT,aAAc,EAAKhC,YAAYU,QAAQK,SApCvC,EAuCnBgC,aAAe,SAACC,GACmB,KAA5B,EAAKjB,MAAMC,cACZ,EAAKS,SAAS,CAACN,UAAU,IACzB,EAAKM,SAAS,CACZQ,UAAW,CACTC,MAAO,EACPC,IAAK,KAGP,EAAKnD,YAAYU,QAAQ0C,kBAAkB,EAAG,GAC9C,EAAKpD,YAAYU,QAAQ2C,OACzB,EAAKrD,YAAYU,QAAQC,QACzB,EAAKX,YAAYU,QAAQ0C,kBAAkB,EAAG,KAG9C,EAAKpD,YAAYU,QAAQC,QACzB,EAAK8B,SAAS,CACVQ,UAAW,CACTC,MAAOF,EAAMxB,OAAOc,eACpBa,IAAKH,EAAMxB,OAAOe,gBAGxB,EAAKE,SAAS,CAACN,UAAU,MA7Dd,EAiEnBmB,kBAAoB,WAChB,IAAIC,EAAS,EACTC,EAAU,EAAKzB,MAAMC,aAEzB,IACI,GAAG,EAAKD,MAAMC,aAAayB,SAAS,MAEhC,YADAC,MAAM,gDAKNH,EAASI,IAAcH,GACvB,EAAKf,SAAS,CAACT,aAAcuB,EAAOK,aACpC,EAAKnB,SAAS,CAACN,UAAU,IACzB,IAAI0B,EAAeN,EAAOK,WAAW3B,OACrC,EAAKQ,SAAS,CACVQ,UAAW,CACXC,MAAOW,EACPV,IAAKU,KAKjB,SAEI,YADAH,MAAM,0BAzFK,EA8FnBI,iBAAmB,WACf,EAAKrB,SAAS,CACVT,aAAc,GACdG,UAAU,EACVc,UAAW,CAACC,MAAO,EAAGC,IAAK,MAlGhB,EAsGnBY,gBAAkB,WACd,IAAI3B,EAAe,EAAKL,MAAMC,aAAaK,UAAU,EAAKrC,YAAYU,QAAQ4B,eAAgB,EAAKtC,YAAYU,QAAQ6B,cAEvH,GAA+B,KAA5B,EAAKR,MAAMC,aAGT,GAAoB,KAAjBI,GAAuB,EAAKL,MAAMI,UAA6B,KAAjBC,EAClD,EAAK4B,sBAAsB5B,OAG/B,CACI,IAAI6B,EAAS,EAAKlC,MAAMC,aAAakC,MAAM,GAAI,GAC/C,EAAKzB,SAAS,CAAET,aAAciC,MAlHnB,EAsHnBE,eAAiB,SAACnD,GACd,EAAKhB,YAAcgB,GAvHJ,EA0HnBwB,sBAAwB,SAAChC,GACrB,IAAI4B,EAAe,EAAKL,MAAMC,aAAaK,UAAU,EAAKrC,YAAYU,QAAQ4B,eAAgB,EAAKtC,YAAYU,QAAQ6B,cAEnH6B,EAAiB,EAAKpE,YAAYU,QAAQ4B,eAC1C+B,EAAe,EAAKrE,YAAYU,QAAQ6B,aAIxC+B,EAHwB,EAAKvC,MAAMC,aAAaK,UAAU,EAAG+B,GAGvB5D,EAFjB,EAAKuB,MAAMC,aAAaK,UAAUgC,EAAc,EAAKtC,MAAMC,aAAaC,QAIjG,EAAKQ,SAAS,CACVT,aAAcsC,IAGlB,EAAK7B,UAAS,SAAAC,GACV,MAAoB,KAAjBN,EACQ,CAACa,UAAU,CACVC,MAAOkB,EAAiB,EACxBjB,IAAKkB,EAAe,GAEpBlC,UAAU,GAGd,EAAKJ,MAAMI,UAA6B,KAAjBC,EAEpB,CAACa,UAAU,CACdC,MAAOR,EAAUO,UAAUC,MAAQ,EACnCC,IAAKT,EAAUO,UAAUE,IAAM,GAE/BhB,UAAU,QANb,KASN,WACC,EAAKnC,YAAYU,QAAQ0C,kBAAkB,EAAKrB,MAAMkB,UAAUC,MAAO,EAAKnB,MAAMkB,UAAUC,OAC5F,EAAKlD,YAAYU,QAAQ2C,OACzB,EAAKrD,YAAYU,QAAQC,QACzB,EAAKX,YAAYU,QAAQ0C,kBAAkB,EAAKrB,MAAMkB,UAAUC,MAAO,EAAKnB,MAAMkB,UAAUC,WA9JjF,EAkKnBc,sBAAwB,SAAC5B,GACrB,IAAIgC,EAAiB,EAAKpE,YAAYU,QAAQ4B,eAC1C+B,EAAe,EAAKrE,YAAYU,QAAQ6B,aACxCgC,EAAwB,EAAKxC,MAAMC,aAAaK,UAAU,EAAG+B,GAC7DI,EAAqB,EAAKzC,MAAMC,aAAaK,UAAUgC,EAAc,EAAKtC,MAAMC,aAAaC,QAE7FqC,EAAc,GAGE,KAAjBlC,EACCkC,EAAcC,EAAwBC,EAElC,EAAKzC,MAAMI,UAA6B,KAAjBC,IAG3BkC,EADSC,EAAsBL,MAAM,GAAI,GAClBM,GAGR,KAAhBF,EACC,EAAK7B,SAAS,CAACT,aAAc,GAC7BG,UAAU,EACVc,UAAW,CAACC,MAAO,EAAGC,IAAK,KAK3B,EAAKV,SAAS,CACVT,aAAcsC,IAItB,EAAK7B,UAAS,SAAAC,GAEV,MAAoB,KAAjBN,EAEQ,CAACa,UAAW,CACfC,MAAOkB,EACPjB,IAAKkB,IAGL,EAAKtC,MAAMI,UAA6B,KAAjBC,EAEpB,CAACa,UAAW,CACfC,MAAOR,EAAUO,UAAUC,MAAQ,EACnCC,IAAKT,EAAUO,UAAUE,IAAM,SAJlC,KAQN,WACC,EAAKnD,YAAYU,QAAQ0C,kBAAkB,EAAKrB,MAAMkB,UAAUC,MAAO,EAAKnB,MAAMkB,UAAUC,OAC5F,EAAKlD,YAAYU,QAAQ2C,OACzB,EAAKrD,YAAYU,QAAQC,QACzB,EAAKX,YAAYU,QAAQ0C,kBAAkB,EAAKrB,MAAMkB,UAAUC,MAAO,EAAKnB,MAAMkB,UAAUC,WApNhG,EAAKnB,MAAQ,CACTC,aAAc,GACdiB,UAAW,CAACC,MAAO,EAAGC,IAAK,GAC3BhB,UAAU,GAEd,EAAKnC,YAAcC,IAAMC,UAAU,MAPpB,E,0CA0NnB,WAAU,IAAD,OACL,OACI,sBAAKU,UAAU,YAAf,UACI,cAAC,EAAD,CACIG,MAAOZ,KAAK4B,MAAMC,aAClBf,SAAU,kBAAM,EAAK6B,qBACrB5B,SAAU,SAAC8B,GAAD,OAAW,EAAKD,aAAaC,IACvC5C,OAAQ,SAACY,GAAD,OAAS,EAAKmD,eAAenD,MAEzC,cAAC,EAAD,CACIS,WAAY,SAAAgD,GAAC,OAAI,EAAK5C,eAAe4C,IACrC9C,iBAAkB,kBAAM,EAAK2B,qBAC7B/B,gBAAiB,kBAAM,EAAKuC,oBAC5BpC,eAAgB,kBAAM,EAAKqC,4B,GAxOtB5C,cCOVuD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0349cdb8.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport $ from \"jquery\"\r\nimport './display.css';\r\n\r\nclass Display extends Component {\r\n    constructor(props){\r\n        super(props)\r\n       this.textareaRef = React.createRef(null);\r\n    }\r\n    \r\n    componentDidMount () {\r\n        this.props.getRef(this.textareaRef);\r\n        $(\"#user-inputs\").on( \"keypress\", function(e) {\r\n            if(e.key !== 'Backspace')\r\n            {\r\n                e.preventDefault();\r\n                return false;\r\n            }\r\n        });\r\n        this.textareaRef.current.focus();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"display\">\r\n                <div>\r\n                    <textarea \r\n                    type=\"text\" \r\n                    id=\"user-inputs\" \r\n                    className=\"user-inputs\" \r\n                    value={this.props.value} \r\n                    ref={this.textareaRef}\r\n                    onChange={this.props.onChange}\r\n                    onSelect={this.props.onSelect}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Display;","import React, { Component } from 'react'\r\nimport './keypad.css'\r\n\r\nclass Keypad extends Component {\r\n    render(e) {\r\n        return (\r\n            <div className=\"keys\">\r\n                <div className=\"row\">\r\n                    <button name=\"C\" className=\"helper\" onClick={(e) => this.props.onClearKeyClick(e.target.name)}>C</button>\r\n                    <button name=\"(\" className=\"helper\" onClick={(e) => this.props.onKeyClick(e.target.name)}>(</button>\r\n                    <button name=\")\" className=\"helper\" onClick={(e) => this.props.onKeyClick(e.target.name)}>)</button>\r\n                    <button name=\"+\" className=\"operator\" onClick={(e) => this.props.onKeyClick(e.target.name)}>+</button>\r\n\r\n                    <button name=\"7\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>7</button>\r\n                    <button name=\"8\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>8</button>\r\n                    <button name=\"9\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>9</button>\r\n                    <button name=\"-\" className=\"operator\" onClick={(e) => this.props.onKeyClick(e.target.name)}>-</button>\r\n\r\n                    <button name=\"4\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>4</button>\r\n                    <button name=\"5\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>5</button>\r\n                    <button name=\"6\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>6</button>\r\n                    <button name=\"*\" className=\"operator\" onClick={(e) => this.props.onKeyClick(e.target.name)}>x</button>\r\n\r\n                    <button name=\"1\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>1</button>\r\n                    <button name=\"2\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>2</button>\r\n                    <button name=\"3\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>3</button>\r\n                    <button name=\"/\" className=\"operator\" onClick={(e) => this.props.onKeyClick(e.target.name)}>÷</button>\r\n\r\n                    <button name=\"0\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>0</button>\r\n                    <button name=\".\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>.</button>\r\n                    <button name=\"←\"  onClick={(e) => this.props.onBackKeyClick(e.target.name)}>←</button>\r\n                    <button name=\"=\" className=\"equals-key\" onClick={(e) => this.props.onEqualsKeyClick(e)}>=</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Keypad;\r\n","import React, { Component } from 'react'\r\nimport Display from '../display/Display'\r\nimport Keypad from '../keypad/Keypad'\r\nimport * as math from 'mathjs'\r\nimport './calculator.css';\r\nclass Calculator extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            runningValue: \"\",\r\n            cursorPos: {start: 0, end: 0},\r\n            selected: false\r\n        };\r\n        this.textareaRef = React.createRef(null);\r\n    }\r\n\r\n    handleKeyClick = (key) => {\r\n        let runningValueIsEmpty = this.state.runningValue.length === 0;\r\n        let selectedStateIsFalse = this.state.selected === false;\r\n        let selectedText = this.state.runningValue.substring(this.textareaRef.current.selectionStart, this.textareaRef.current.selectionEnd);\r\n\r\n        if(selectedText !== \"\" || this.state.selected && selectedText === \"\"){\r\n            this.insertTextIntoDisplay(key);\r\n        }\r\n        else\r\n        {\r\n            if(runningValueIsEmpty || !runningValueIsEmpty && selectedStateIsFalse){\r\n\r\n                this.setState(prevState => ({\r\n                    runningValue: prevState.runningValue.concat(key)\r\n                }));\r\n    \r\n                //scroll the textarea up when the input reaches the bottom\r\n                if(this.textareaRef != null){\r\n                    this.textareaRef.current.scrollTop = this.textareaRef.current.scrollHeight;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //the backspace key on the keyboard is pressed\r\n    handleInputChange = () => {\r\n        this.setState({runningValue: this.textareaRef.current.value});\r\n    }\r\n\r\n    handleSelect = (event) => {\r\n        if(this.state.runningValue === \"\"){\r\n          this.setState({selected: false});\r\n          this.setState({\r\n            cursorPos: {\r\n              start: 0,\r\n              end: 0\r\n            }\r\n          });\r\n            this.textareaRef.current.setSelectionRange(0, 0);\r\n            this.textareaRef.current.blur();\r\n            this.textareaRef.current.focus();\r\n            this.textareaRef.current.setSelectionRange(0, 0);\r\n        }\r\n        else{\r\n            this.textareaRef.current.focus();\r\n            this.setState({\r\n                cursorPos: {\r\n                  start: event.target.selectionStart,\r\n                  end: event.target.selectionEnd\r\n                }\r\n              });\r\n            this.setState({selected: true});\r\n        }\r\n    }\r\n\r\n    handleEqualsClick = () => {\r\n        let result = 0;\r\n        let running = this.state.runningValue;\r\n\r\n        try {\r\n            if(this.state.runningValue.includes(\"/0\")){\r\n                alert(\"Cannot divide by 0! Please check your input.\");\r\n                return;\r\n            }\r\n            else{\r\n                //calculate the math expression on the display\r\n                result = math.evaluate(running);\r\n                this.setState({runningValue: result.toString()});\r\n                this.setState({selected: false});\r\n                let newCursorPos = result.toString().length;\r\n                this.setState({\r\n                    cursorPos: {\r\n                    start: newCursorPos,\r\n                    end: newCursorPos\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        catch {\r\n            alert(\"Invalid calculation!\");\r\n            return;\r\n        }\r\n    }\r\n\r\n    handleClearClick = () => {\r\n        this.setState({ \r\n            runningValue: \"\", \r\n            selected: false,\r\n            cursorPos: {start: 0, end: 0}\r\n        });\r\n    }\r\n\r\n    handleBackClick = () => {\r\n        let selectedText = this.state.runningValue.substring(this.textareaRef.current.selectionStart, this.textareaRef.current.selectionEnd);\r\n        //if there is an active cursor in the textarea and all the characters are deleted\r\n        if(this.state.runningValue === \"\"){\r\n            return;\r\n        }\r\n        else if(selectedText !== \"\" || this.state.selected && selectedText === \"\"){\r\n            this.deleteTextFromDisplay(selectedText);\r\n        }\r\n        else\r\n        {\r\n            let sliced = this.state.runningValue.slice(0, -1);\r\n            this.setState({ runningValue: sliced });\r\n        }\r\n    }\r\n\r\n    getTextareaRef = (ref) => {\r\n        this.textareaRef = ref;\r\n    }\r\n\r\n    insertTextIntoDisplay = (key) => {\r\n        let selectedText = this.state.runningValue.substring(this.textareaRef.current.selectionStart, this.textareaRef.current.selectionEnd);\r\n\r\n        let cursorStartPos = this.textareaRef.current.selectionStart;\r\n        let cursorEndPos = this.textareaRef.current.selectionEnd;\r\n        let textBeforeCursorStart = this.state.runningValue.substring(0, cursorStartPos);\r\n        let textAfterCursorEnd = this.state.runningValue.substring(cursorEndPos, this.state.runningValue.length);\r\n\r\n        let updatedText = textBeforeCursorStart + key + textAfterCursorEnd;\r\n    \r\n        this.setState({\r\n            runningValue: updatedText\r\n        });\r\n        \r\n        this.setState(prevState => {\r\n            if(selectedText !== \"\"){\r\n                return {cursorPos:{\r\n                        start: cursorStartPos + 1,\r\n                        end: cursorEndPos + 1\r\n                        },\r\n                        selected: true\r\n                    }\r\n            }\r\n            else if(this.state.selected && selectedText === \"\")\r\n            {\r\n                return {cursorPos:{\r\n                    start: prevState.cursorPos.start + 1,\r\n                    end: prevState.cursorPos.end + 1\r\n                    },\r\n                    selected: true\r\n                }\r\n            }\r\n        }, () => {\r\n            this.textareaRef.current.setSelectionRange(this.state.cursorPos.start, this.state.cursorPos.start);\r\n            this.textareaRef.current.blur();\r\n            this.textareaRef.current.focus();\r\n            this.textareaRef.current.setSelectionRange(this.state.cursorPos.start, this.state.cursorPos.start);\r\n        });\r\n    }\r\n\r\n    deleteTextFromDisplay = (selectedText) => {\r\n        let cursorStartPos = this.textareaRef.current.selectionStart;\r\n        let cursorEndPos = this.textareaRef.current.selectionEnd;\r\n        let textBeforeCursorStart = this.state.runningValue.substring(0, cursorStartPos);\r\n        let textAfterCursorEnd = this.state.runningValue.substring(cursorEndPos, this.state.runningValue.length);\r\n\r\n        let updatedText = \"\";\r\n        let sliced = \"\";\r\n\r\n        if(selectedText !== \"\"){\r\n            updatedText = textBeforeCursorStart + textAfterCursorEnd;\r\n        }\r\n        else if(this.state.selected && selectedText === \"\")\r\n        {\r\n            sliced = textBeforeCursorStart.slice(0, -1);\r\n            updatedText = sliced + textAfterCursorEnd;\r\n        }\r\n\r\n        if(updatedText === \"\"){\r\n            this.setState({runningValue: \"\",\r\n            selected: false,\r\n            cursorPos: {start: 0, end: 0}\r\n            })   \r\n        }\r\n        else\r\n        {\r\n            this.setState({\r\n                runningValue: updatedText\r\n            });\r\n        }\r\n\r\n        this.setState(prevState => {\r\n            \r\n            if(selectedText !== \"\")\r\n            {\r\n                return {cursorPos: {\r\n                    start: cursorStartPos,\r\n                    end: cursorEndPos\r\n                    }}\r\n            }\r\n            else if(this.state.selected && selectedText === \"\")\r\n            {\r\n                return {cursorPos: {\r\n                    start: prevState.cursorPos.start - 1,\r\n                    end: prevState.cursorPos.end - 1\r\n                    }}\r\n            }\r\n            \r\n        }, () => {\r\n            this.textareaRef.current.setSelectionRange(this.state.cursorPos.start, this.state.cursorPos.start);\r\n            this.textareaRef.current.blur();\r\n            this.textareaRef.current.focus();\r\n            this.textareaRef.current.setSelectionRange(this.state.cursorPos.start, this.state.cursorPos.start);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <Display \r\n                    value={this.state.runningValue} \r\n                    onChange={() => this.handleInputChange()} \r\n                    onSelect={(event) => this.handleSelect(event)}\r\n                    getRef={(ref) => this.getTextareaRef(ref)}/>\r\n\r\n                <Keypad \r\n                    onKeyClick={i => this.handleKeyClick(i)}\r\n                    onEqualsKeyClick={() => this.handleEqualsClick()}\r\n                    onClearKeyClick={() => this.handleClearClick()}\r\n                    onBackKeyClick={() => this.handleBackClick()} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Calculator;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Calculator from './components/calculator/Calculator';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Calculator />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}