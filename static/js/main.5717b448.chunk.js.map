{"version":3,"sources":["components/display/Display.js","components/keypad/Keypad.js","components/calculator/parentheses.js","components/calculator/Calculator.js","reportWebVitals.js","index.js"],"names":["Display","props","textareaRef","React","createRef","this","getRef","$","on","e","key","preventDefault","current","setSelectionRange","blur","focus","className","type","id","value","ref","onChange","onSelect","Component","Keypad","name","onClick","onClearKeyClick","target","onKeyClick","onBackKeyClick","onEqualsKeyClick","ParenthesesProcessor","getNextParentheses","calcComponent","state","cursorPos","start","runningValue","lastIndexOf","Calculator","handleKeyClick","selectedText","substring","selectionStart","selectionEnd","length","setState","prevState","concat","end","setInputSelectionRange","scrollTop","scrollHeight","insertTextIntoDisplay","handleInputChange","handleSelect","event","handleEqualsClick","result","includes","alert","math","toString","newCursorPos","handleClearClick","handleBackClick","deleteTextFromDisplay","sliced","slice","updatedText","cursorStartPos","cursorEndPos","textBeforeCursorStart","textAfterCursorEnd","allSelected","getTextareaRef","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5717b448.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport $ from \"jquery\"\r\nimport './display.css';\r\n\r\nclass Display extends Component {\r\n    constructor(props){\r\n        super(props)\r\n       this.textareaRef = React.createRef(null);\r\n    }\r\n    \r\n    componentDidMount () {\r\n        this.props.getRef(this.textareaRef);\r\n        $(\"#user-inputs\").on( \"keypress\", function(e) {\r\n            if(e.key !== 'Backspace')\r\n            {\r\n                e.preventDefault();\r\n                return false;\r\n            }\r\n        });\r\n      //  this.textareaRef.current.focus();\r\n      this.textareaRef.current.setSelectionRange(0, 0);\r\n      this.textareaRef.current.blur();\r\n      this.textareaRef.current.focus();\r\n      this.textareaRef.current.setSelectionRange(0, 0);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"display\">\r\n                <div>\r\n                    <textarea \r\n                    type=\"text\" \r\n                    id=\"user-inputs\" \r\n                    className=\"user-inputs\" \r\n                    value={this.props.value} \r\n                    ref={this.textareaRef}\r\n                    onChange={this.props.onChange}\r\n                    onSelect={this.props.onSelect}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Display;","import React, { Component } from 'react'\r\nimport './keypad.css'\r\n\r\nclass Keypad extends Component {\r\n    render(e) {\r\n        return (\r\n            <div className=\"keys\">\r\n                <div className=\"row\">\r\n                    <button name=\"C\" className=\"helper\" onClick={(e) => this.props.onClearKeyClick(e.target.name)}>C</button>\r\n                    <button name=\"%\" className=\"helper\" onClick={(e) => this.props.onKeyClick(e.target.name)}>%</button>\r\n                    <button name=\"()\" className=\"helper\" onClick={(e) => this.props.onKeyClick(e.target.name)}>( )</button>\r\n                    <button name=\"+\" className=\"operator\" onClick={(e) => this.props.onKeyClick(e.target.name)}>+</button>\r\n\r\n                    <button name=\"7\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>7</button>\r\n                    <button name=\"8\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>8</button>\r\n                    <button name=\"9\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>9</button>\r\n                    <button name=\"-\" className=\"operator\" onClick={(e) => this.props.onKeyClick(e.target.name)}>-</button>\r\n\r\n                    <button name=\"4\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>4</button>\r\n                    <button name=\"5\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>5</button>\r\n                    <button name=\"6\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>6</button>\r\n                    <button name=\"*\" className=\"operator\" onClick={(e) => this.props.onKeyClick(e.target.name)}>x</button>\r\n\r\n                    <button name=\"1\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>1</button>\r\n                    <button name=\"2\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>2</button>\r\n                    <button name=\"3\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>3</button>\r\n                    <button name=\"/\" className=\"operator\" onClick={(e) => this.props.onKeyClick(e.target.name)}>÷</button>\r\n\r\n                    <button name=\"0\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>0</button>\r\n                    <button name=\".\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>.</button>\r\n                    <button name=\"←\"  onClick={(e) => this.props.onBackKeyClick(e.target.name)}>←</button>\r\n                    <button name=\"=\" className=\"equals-key\" onClick={(e) => this.props.onEqualsKeyClick(e)}>=</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Keypad;\r\n","class ParenthesesProcessor {\r\n    static getNextParentheses = (calcComponent) => {\r\n        if(calcComponent.state.cursorPos.start === 0)\r\n        {\r\n            return \"(\";\r\n        }\r\n        else\r\n        {\r\n             let leftParentheseNearestIndex = calcComponent.state.runningValue.lastIndexOf(\"(\", calcComponent.state.cursorPos.start - 1);\r\n             let rightParentheseNearestIndex = calcComponent.state.runningValue.lastIndexOf(\")\", calcComponent.state.cursorPos.start - 1);\r\n     \r\n             //if the closest parentheses from the left of the cursor is the left parentheses  \r\n             if(leftParentheseNearestIndex > rightParentheseNearestIndex)\r\n             {\r\n             // calcComponent.setState({parentheses: \"(\"});\r\n                 return \")\";\r\n             }\r\n             else\r\n             {\r\n                 //calcComponent.setState({parentheses: \")\"});\r\n                 return \"(\";\r\n             }\r\n        }\r\n    }\r\n}\r\n\r\nexport default ParenthesesProcessor;","import React, { Component } from 'react'\r\nimport Display from '../display/Display'\r\nimport Keypad from '../keypad/Keypad'\r\nimport * as math from 'mathjs'\r\nimport './calculator.css';\r\nimport ParenthesesProcessor from './parentheses';\r\nclass Calculator extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            runningValue: \"\",\r\n            cursorPos: {start: 0, end: 0},\r\n        };\r\n        this.textareaRef = React.createRef(null);\r\n    }\r\n\r\n    handleKeyClick = (key) => {\r\n        let selectedText = this.state.runningValue.substring(this.textareaRef.current.selectionStart, this.textareaRef.current.selectionEnd);\r\n\r\n        if(key === \"()\"){\r\n            key = ParenthesesProcessor.getNextParentheses(this);\r\n        }\r\n\r\n        //if the cursor is currently at the end of the running display value\r\n        if(this.state.cursorPos.start === this.state.runningValue.length + 1 || this.state.runningValue === \"\"){\r\n            this.setState(prevState => ({\r\n                runningValue: prevState.runningValue.concat(key)\r\n            }));\r\n\r\n            this.setState(prevState => {\r\n                return {cursorPos:{\r\n                    start: prevState.cursorPos.start + 1,\r\n                    end: prevState.cursorPos.end + 1\r\n                    },\r\n                }\r\n            }, () => {\r\n                this.setInputSelectionRange(this.state.cursorPos.start, this.state.cursorPos.start);\r\n            });\r\n\r\n            //scroll up the text in the display when it reaches the bottom of the textarea\r\n            if(this.textareaRef != null){\r\n                this.textareaRef.current.scrollTop = this.textareaRef.current.scrollHeight;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.insertTextIntoDisplay(key, selectedText);\r\n        }\r\n    }\r\n\r\n    //the backspace key on the keyboard is pressed\r\n    handleInputChange = () => {\r\n        this.setState({runningValue: this.textareaRef.current.value});\r\n    }\r\n\r\n    handleSelect = (event) => {\r\n        if(this.state.runningValue === \"\"){\r\n          this.setState({\r\n            cursorPos: {\r\n              start: 0,\r\n              end: 0\r\n            },\r\n          });\r\n          this.setInputSelectionRange(0, 0);\r\n        }\r\n        else{\r\n            this.setState({\r\n                cursorPos: {\r\n                  start: event.target.selectionStart,\r\n                  end: event.target.selectionEnd\r\n                }\r\n              }, () => {\r\n                this.setInputSelectionRange(this.state.cursorPos.start, this.state.cursorPos.end);\r\n              });\r\n        }\r\n    }\r\n\r\n    handleEqualsClick = () => {\r\n        let result = 0;\r\n\r\n        try {\r\n            if(this.state.runningValue.includes(\"/0\")){\r\n                alert(\"Cannot divide by 0! Please check your input.\");\r\n                return;\r\n            }\r\n            else{\r\n                //calculate the math expression on the display\r\n                result = math.evaluate(this.state.runningValue);\r\n                this.setState({runningValue: result.toString()});\r\n                let newCursorPos = result.toString().length;\r\n                this.setState({\r\n                    cursorPos: {\r\n                    start: newCursorPos,\r\n                    end: newCursorPos\r\n                    },\r\n                }, () => {\r\n                    this.setInputSelectionRange(newCursorPos, newCursorPos);\r\n                });\r\n            }\r\n        }\r\n        catch {\r\n            alert(\"Invalid calculation!\");\r\n            return;\r\n        }\r\n    }\r\n\r\n    handleClearClick = () => {\r\n        this.setState({ \r\n            runningValue: \"\",\r\n            cursorPos: {start: 0, end: 0},\r\n        });\r\n    }\r\n\r\n    handleBackClick = () => {\r\n        let selectedText = this.state.runningValue.substring(this.textareaRef.current.selectionStart, this.textareaRef.current.selectionEnd);\r\n       \r\n        if(this.state.runningValue === \"\"){\r\n            return;\r\n        } //if a text selection exists or no selection exists while the textarea is selected\r\n        else if(selectedText !== \"\" || selectedText === \"\"){\r\n            this.deleteTextFromDisplay(selectedText);\r\n        }\r\n        else\r\n        {//default trailing delete behavior\r\n            let sliced = this.state.runningValue.slice(0, -1);\r\n            this.setState({ runningValue: sliced });\r\n        }\r\n    }\r\n\r\n    insertTextIntoDisplay = (key, selectedText) => {\r\n        let cursorStartPos = this.state.cursorPos.start;\r\n        let cursorEndPos = this.state.cursorPos.end;\r\n        let textBeforeCursorStart = this.state.runningValue.substring(0, cursorStartPos);\r\n        let textAfterCursorEnd = this.state.runningValue.substring(cursorEndPos, this.state.runningValue.length);\r\n        let allSelected = selectedText === this.state.runningValue;\r\n        let updatedText;\r\n\r\n        if(key === \"(\" || key === \")\"){\r\n            key = ParenthesesProcessor.getNextParentheses(this);\r\n        }\r\n\r\n        //if the entire input is selected\r\n        if(allSelected){\r\n            updatedText = key;\r\n        }\r\n        else{\r\n            updatedText = textBeforeCursorStart + key + textAfterCursorEnd;\r\n        }\r\n\r\n        this.setState({\r\n            runningValue: updatedText\r\n        });\r\n        \r\n        this.setState(prevState => {\r\n            if(selectedText !== \"\"){\r\n                if(allSelected){\r\n                    return {cursorPos:{\r\n                        start: 1,\r\n                        end: 1\r\n                        },\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                     return {cursorPos:{\r\n                        start: cursorStartPos + 1,\r\n                        end: cursorEndPos + 1\r\n                        },\r\n                    }\r\n                }\r\n               \r\n            }\r\n            else if(selectedText === \"\")\r\n            {\r\n                return {cursorPos:{\r\n                    start: prevState.cursorPos.start + 1,\r\n                    end: prevState.cursorPos.end + 1\r\n                    },\r\n                }\r\n            }\r\n        }, () => {\r\n            this.setInputSelectionRange(this.state.cursorPos.start, this.state.cursorPos.start);\r\n        });\r\n    }\r\n\r\n    deleteTextFromDisplay = (selectedText) => {\r\n        let cursorStartPos = this.textareaRef.current.selectionStart;\r\n        let cursorEndPos = this.textareaRef.current.selectionEnd;\r\n        let textBeforeCursorStart = this.state.runningValue.substring(0, cursorStartPos);\r\n        let textAfterCursorEnd = this.state.runningValue.substring(cursorEndPos, this.state.runningValue.length);\r\n\r\n        let updatedText = \"\";\r\n        let sliced = \"\";\r\n\r\n        if(selectedText !== \"\"){\r\n            updatedText = textBeforeCursorStart + textAfterCursorEnd;\r\n        }\r\n        else if(selectedText === \"\")\r\n        {\r\n            sliced = textBeforeCursorStart.slice(0, -1);\r\n            updatedText = sliced + textAfterCursorEnd;\r\n        }\r\n\r\n        if(updatedText === \"\"){\r\n            this.setState({runningValue: \"\",\r\n            cursorPos: {start: 0, end: 0},\r\n            })   \r\n        }\r\n        else\r\n        {\r\n            this.setState({\r\n                runningValue: updatedText\r\n            });\r\n        }\r\n\r\n        this.setState(prevState => {\r\n            \r\n            if(selectedText !== \"\")\r\n            {\r\n                return {cursorPos: {\r\n                    start: cursorStartPos,\r\n                    end: cursorEndPos\r\n                    }}\r\n            }\r\n            else if(selectedText === \"\")\r\n            {\r\n                return {cursorPos: {\r\n                    start: prevState.cursorPos.start - 1,\r\n                    end: prevState.cursorPos.end - 1\r\n                    },\r\n                }\r\n            }\r\n            \r\n        }, () => {\r\n            this.setInputSelectionRange(this.state.cursorPos.start, this.state.cursorPos.start);\r\n        });\r\n    }\r\n\r\n    setInputSelectionRange = (selectionStart, selectionEnd) => {\r\n        this.textareaRef.current.setSelectionRange(selectionStart, selectionEnd);\r\n        this.textareaRef.current.blur();\r\n        this.textareaRef.current.focus();\r\n        this.textareaRef.current.setSelectionRange(selectionStart, selectionEnd);\r\n    }\r\n\r\n    getTextareaRef = (ref) => {\r\n        this.textareaRef = ref;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <Display \r\n                    value={this.state.runningValue} \r\n                    onChange={() => this.handleInputChange()} \r\n                    onSelect={(event) => this.handleSelect(event)}\r\n                    getRef={(ref) => this.getTextareaRef(ref)}/>\r\n\r\n                <Keypad \r\n                    onKeyClick={i => this.handleKeyClick(i)}\r\n                    onEqualsKeyClick={() => this.handleEqualsClick()}\r\n                    onClearKeyClick={() => this.handleClearClick()}\r\n                    onBackKeyClick={() => this.handleBackClick()} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Calculator;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Calculator from './components/calculator/Calculator';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Calculator />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}