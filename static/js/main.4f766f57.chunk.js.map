{"version":3,"sources":["components/display/Display.js","components/keypad/Keypad.js","components/calculator/Calculator.js","reportWebVitals.js","index.js"],"names":["Display","props","textareaRef","React","createRef","this","getRef","$","on","e","key","preventDefault","current","focus","className","type","id","value","ref","onChange","onSelect","Component","Keypad","name","onClick","onClearKeyClick","target","onKeyClick","onBackKeyClick","onEqualsKeyClick","Calculator","handleKeyClick","runningValueIsEmpty","state","runningValue","length","selectedStateIsFalse","selected","selectedText","substring","selectionStart","selectionEnd","setState","prevState","concat","scrollTop","scrollHeight","cursorStartPos","cursorEndPos","textBeforeCursorStart","textAfterCursorEnd","updatedText","cursorPos","start","end","setSelectionRange","blur","cursorPosition","textBeforeCursorPosition","textAfterCursorPosition","handleInputChange","handleSelect","event","handleEqualsClick","result","running","includes","alert","math","toString","newCursorPos","handleClearClick","handleBackClick","slice","sliced","getTextareaRef","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4f766f57.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport $ from \"jquery\"\r\nimport './display.css';\r\n\r\nclass Display extends Component {\r\n    constructor(props){\r\n        super(props)\r\n       this.textareaRef = React.createRef(null);\r\n    }\r\n    \r\n    componentDidMount () {\r\n        this.props.getRef(this.textareaRef);\r\n        $(\"#user-inputs\").on( \"keypress\", function(e) {\r\n            if(e.key !== 'Backspace')\r\n            {\r\n                e.preventDefault();\r\n                return false;\r\n            }\r\n        });\r\n        this.textareaRef.current.focus();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"display\">\r\n                <div>\r\n                    <textarea \r\n                    type=\"text\" \r\n                    id=\"user-inputs\" \r\n                    className=\"user-inputs\" \r\n                    value={this.props.value} \r\n                    ref={this.textareaRef}\r\n                    onChange={this.props.onChange}\r\n                    onSelect={this.props.onSelect}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Display;","import React, { Component } from 'react'\r\nimport './keypad.css'\r\n\r\nclass Keypad extends Component {\r\n    render(e) {\r\n        return (\r\n            <div className=\"keys\">\r\n                <div className=\"row\">\r\n                    <button name=\"C\" className=\"helper\" onClick={(e) => this.props.onClearKeyClick(e.target.name)}>C</button>\r\n                    <button name=\"(\" className=\"helper\" onClick={(e) => this.props.onKeyClick(e.target.name)}>(</button>\r\n                    <button name=\")\" className=\"helper\" onClick={(e) => this.props.onKeyClick(e.target.name)}>)</button>\r\n                    <button name=\"+\" className=\"operator\" onClick={(e) => this.props.onKeyClick(e.target.name)}>+</button>\r\n\r\n                    <button name=\"7\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>7</button>\r\n                    <button name=\"8\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>8</button>\r\n                    <button name=\"9\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>9</button>\r\n                    <button name=\"-\" className=\"operator\" onClick={(e) => this.props.onKeyClick(e.target.name)}>-</button>\r\n\r\n                    <button name=\"4\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>4</button>\r\n                    <button name=\"5\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>5</button>\r\n                    <button name=\"6\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>6</button>\r\n                    <button name=\"*\" className=\"operator\" onClick={(e) => this.props.onKeyClick(e.target.name)}>x</button>\r\n\r\n                    <button name=\"1\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>1</button>\r\n                    <button name=\"2\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>2</button>\r\n                    <button name=\"3\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>3</button>\r\n                    <button name=\"/\" className=\"operator\" onClick={(e) => this.props.onKeyClick(e.target.name)}>÷</button>\r\n\r\n                    <button name=\"0\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>0</button>\r\n                    <button name=\".\"  onClick={(e) => this.props.onKeyClick(e.target.name)}>.</button>\r\n                    <button name=\"←\"  onClick={(e) => this.props.onBackKeyClick(e.target.name)}>←</button>\r\n                    <button name=\"=\" className=\"equals-key\" onClick={(e) => this.props.onEqualsKeyClick(e)}>=</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Keypad;\r\n","import React, { Component } from 'react'\r\nimport Display from '../display/Display'\r\nimport Keypad from '../keypad/Keypad'\r\nimport * as math from 'mathjs'\r\nimport './calculator.css';\r\nclass Calculator extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            runningValue: \"\",\r\n            cursorPos: {start: 0, end: 0},\r\n            selected: false\r\n        };\r\n        this.textareaRef = React.createRef(null);\r\n    }\r\n\r\n    handleKeyClick = (key) => {\r\n        let runningValueIsEmpty = this.state.runningValue.length === 0;\r\n        let selectedStateIsFalse = this.state.selected === false;\r\n        let selectedText = this.state.runningValue.substring(this.textareaRef.current.selectionStart, this.textareaRef.current.selectionEnd);\r\n\r\n        //if the display is empty or a key is pressed and there is no active cursor in the textarea\r\n        if(runningValueIsEmpty || !runningValueIsEmpty && selectedStateIsFalse){\r\n\r\n            this.setState(prevState => ({\r\n                runningValue: prevState.runningValue.concat(key)\r\n            }));\r\n\r\n            //scroll the textarea up when the input reaches the bottom\r\n            if(this.textareaRef != null){\r\n                this.textareaRef.current.scrollTop = this.textareaRef.current.scrollHeight;\r\n                }\r\n        }\r\n        else {\r\n            if(selectedText !== \"\"){\r\n                let cursorStartPos = this.textareaRef.current.selectionStart;\r\n                let cursorEndPos = this.textareaRef.current.selectionEnd;\r\n                let textBeforeCursorStart = this.state.runningValue.substring(0, cursorStartPos);\r\n                let textAfterCursorEnd = this.state.runningValue.substring(cursorEndPos, this.state.runningValue.length);\r\n\r\n                let updatedText = textBeforeCursorStart + key + textAfterCursorEnd;\r\n            \r\n                this.setState({\r\n                    runningValue: updatedText\r\n                });\r\n        \r\n                this.setState({\r\n                    cursorPos: {\r\n                    start: cursorStartPos + 1,\r\n                    end: cursorEndPos + 1\r\n                    }\r\n                }, () => {\r\n                    this.textareaRef.current.setSelectionRange(this.state.cursorPos.start, this.state.cursorPos.start);\r\n                    this.textareaRef.current.blur();\r\n                    this.textareaRef.current.focus();\r\n                    this.textareaRef.current.setSelectionRange(this.state.cursorPos.start, this.state.cursorPos.start);\r\n                });\r\n            \r\n            }\r\n            else\r\n            {   //else insert the key at the cursor position\r\n                let cursorPosition = this.state.cursorPos.start;\r\n                let textBeforeCursorPosition = this.state.runningValue.substring(0, cursorPosition);\r\n                let textAfterCursorPosition = this.state.runningValue.substring(cursorPosition, this.state.runningValue.length);\r\n                let updatedText = textBeforeCursorPosition + key + textAfterCursorPosition;\r\n                this.setState(prevState => ({\r\n                    runningValue: updatedText\r\n                }));\r\n                    this.setState(prevState => ({\r\n                        cursorPos: {\r\n                        start: prevState.cursorPos.start + 1,\r\n                        end: prevState.cursorPos.end + 1\r\n                        }\r\n                    }), () => {\r\n                        //scroll to the current position of the cursor\r\n                        this.textareaRef.current.setSelectionRange(this.state.cursorPos.start, this.state.cursorPos.end);\r\n                        this.textareaRef.current.blur();\r\n                        this.textareaRef.current.focus();\r\n                        this.textareaRef.current.setSelectionRange(this.state.cursorPos.start, this.state.cursorPos.end);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n    //the backspace key on the keyboard is pressed\r\n    handleInputChange = () => {\r\n        this.setState({runningValue: this.textareaRef.current.value});\r\n    }\r\n\r\n    handleSelect = (event) => {\r\n        if(this.state.runningValue === \"\"){\r\n          this.setState({selected: false});\r\n          this.setState({\r\n            cursorPos: {\r\n              start: 0,\r\n              end: 0\r\n            }\r\n          });\r\n            this.textareaRef.current.setSelectionRange(0, 0);\r\n            this.textareaRef.current.blur();\r\n            this.textareaRef.current.focus();\r\n            this.textareaRef.current.setSelectionRange(0, 0);\r\n        }\r\n        else{\r\n            this.textareaRef.current.focus();\r\n            this.setState({\r\n                cursorPos: {\r\n                  start: event.target.selectionStart,\r\n                  end: event.target.selectionEnd\r\n                }\r\n              });\r\n            this.setState({selected: true});\r\n        }\r\n    }\r\n\r\n    handleEqualsClick = () => {\r\n        let result = 0;\r\n        let running = this.state.runningValue;\r\n\r\n        try {\r\n            if(this.state.runningValue.includes(\"/0\")){\r\n                alert(\"Cannot divide by 0! Please check your input.\");\r\n                return;\r\n            }\r\n            else{\r\n                //calculate the math expression on the display\r\n                result = math.evaluate(running);\r\n                this.setState({runningValue: result.toString()});\r\n                this.setState({selected: false});\r\n                let newCursorPos = result.toString().length;\r\n                this.setState({\r\n                    cursorPos: {\r\n                    start: newCursorPos,\r\n                    end: newCursorPos\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        catch {\r\n            alert(\"Invalid calculation!\");\r\n            return;\r\n        }\r\n    }\r\n\r\n    handleClearClick = () => {\r\n        this.setState({ \r\n            runningValue: \"\", \r\n            selected: false,\r\n            cursorPos: {start: 0, end: 0}\r\n        });\r\n    }\r\n\r\n    handleBackClick = () => {\r\n        let selectedText = this.state.runningValue.substring(this.textareaRef.current.selectionStart, this.textareaRef.current.selectionEnd);\r\n        //if there is an active cursor in the textarea and all the characters are deleted\r\n        if(this.state.runningValue === \"\"){\r\n            return;\r\n        }\r\n        else if(this.state.selected && selectedText !== \"\"){\r\n            let cursorStartPos = this.textareaRef.current.selectionStart;\r\n            let cursorEndPos = this.textareaRef.current.selectionEnd;\r\n            let textBeforeCursorStart = this.state.runningValue.substring(0, cursorStartPos);\r\n            let textAfterCursorEnd = this.state.runningValue.substring(cursorEndPos, this.state.runningValue.length);\r\n\r\n            let updatedText = textBeforeCursorStart + textAfterCursorEnd;\r\n            \r\n            if(updatedText === \"\"){\r\n                this.setState({\r\n                    runningValue: \"\",\r\n                    selected: false,\r\n                    cursorPos: {start: 0, end: 0}\r\n                });\r\n            }\r\n            else\r\n            {\r\n                this.setState({\r\n                    runningValue: updatedText\r\n                });\r\n        \r\n                this.setState({\r\n                    cursorPos: {\r\n                    start: cursorStartPos,\r\n                    end: cursorEndPos\r\n                    }\r\n                }, () => {\r\n                    this.textareaRef.current.setSelectionRange(cursorStartPos, cursorStartPos);\r\n                    this.textareaRef.current.blur();\r\n                    this.textareaRef.current.focus();\r\n                    this.textareaRef.current.setSelectionRange(cursorStartPos, cursorStartPos);\r\n                });\r\n            }\r\n        }\r\n        else if(this.state.selected && selectedText === \"\"){\r\n            let cursorStartPos = this.textareaRef.current.selectionStart;\r\n            let cursorEndPos = this.textareaRef.current.selectionEnd;\r\n            let textBeforeCursorStart = this.state.runningValue.substring(0, cursorStartPos);\r\n            let textAfterCursorEnd = this.state.runningValue.substring(cursorEndPos, this.state.runningValue.length);\r\n\r\n            let sliced = textBeforeCursorStart.slice(0, -1);\r\n            let updatedText = sliced + textAfterCursorEnd;\r\n            \r\n            if(updatedText === \"\"){\r\n                this.setState({\r\n                    runningValue: \"\",\r\n                    cursorPos: {start: 0, end: 0},\r\n                    selected: false\r\n                });\r\n            }\r\n            else\r\n            {\r\n                this.setState({\r\n                    runningValue: updatedText\r\n                });\r\n                this.setState(prevState => ({\r\n                    cursorPos: {\r\n                    start: prevState.cursorPos.start - 1,\r\n                    end: prevState.cursorPos.end - 1\r\n                    }\r\n                }), () => {\r\n                    //scroll to the current position of the cursor\r\n                    this.textareaRef.current.setSelectionRange(this.state.cursorPos.start, this.state.cursorPos.start);\r\n                    this.textareaRef.current.blur();\r\n                    this.textareaRef.current.focus();\r\n                    this.textareaRef.current.setSelectionRange(this.state.cursorPos.start, this.state.cursorPos.start);\r\n                });\r\n            }\r\n        }\r\n        else if(!this.state.selected && selectedText !== \"\"){\r\n            let cursorStartPos = this.textareaRef.current.selectionStart;\r\n            let cursorEndPos = this.textareaRef.current.selectionEnd;\r\n            let textBeforeCursorStart = this.state.runningValue.substring(0, cursorStartPos);\r\n            let textAfterCursorEnd = this.state.runningValue.substring(cursorEndPos, this.state.runningValue.length);\r\n\r\n            let updatedText = textBeforeCursorStart + textAfterCursorEnd;\r\n    \r\n            this.setState({\r\n                runningValue: updatedText\r\n            });\r\n    \r\n            this.setState({\r\n                cursorPos: {\r\n                start: cursorStartPos,\r\n                end: cursorEndPos\r\n                }\r\n            }, () => {\r\n                this.textareaRef.current.setSelectionRange(cursorStartPos, cursorStartPos);\r\n                this.textareaRef.current.blur();\r\n                this.textareaRef.current.focus();\r\n                this.textareaRef.current.setSelectionRange(cursorStartPos, cursorStartPos);\r\n            });\r\n            \r\n        }\r\n        else\r\n        {\r\n            let sliced = this.state.runningValue.slice(0, -1);\r\n            this.setState({ runningValue: sliced });\r\n        }\r\n    }\r\n\r\n    getTextareaRef = (ref) => {\r\n        this.textareaRef = ref;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <Display \r\n                    value={this.state.runningValue} \r\n                    onChange={() => this.handleInputChange()} \r\n                    onSelect={(event) => this.handleSelect(event)}\r\n                    getRef={(ref) => this.getTextareaRef(ref)}/>\r\n\r\n                <Keypad \r\n                    onKeyClick={i => this.handleKeyClick(i)}\r\n                    onEqualsKeyClick={() => this.handleEqualsClick()}\r\n                    onClearKeyClick={() => this.handleClearClick()}\r\n                    onBackKeyClick={() => this.handleBackClick()} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Calculator;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Calculator from './components/calculator/Calculator';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Calculator />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}